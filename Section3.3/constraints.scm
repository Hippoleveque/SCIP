(define C (make-connector))
(define F (make-connector))
(celsius-fahrenheit-converter C F)

(define (celsius-fahrenheit-converter c f)
    (let ((u (make-connector))
          (v (make-connector))
          (w (make-connector))
          (x (make-connector))
          (y (make-connector))
         )
         (multiplier w c u)
         (multiplier x v u)
         (adder v y f)
         (constant 9 w)
         (constant 5 x)
         (constant 32 y)
         'ok
    )
)

(define (adder a1 a2 sum)
    (define (process-new-value)
        (cond ((and (has-value? a1) (has-value? a2)) 
               (set-value! sum 
                           (+ (get-value a1) (get-value a2)) 
                            me)
              )
              ((and (has-value? a1) (has-value? sum))
               (set-value! a2 
                           (- (get-value sum) (get-value a1))
                           me)
              )
              ((and (has-value? a2) (has-value? sum))
                (set-value! a1 
                            (- (get-value sum) (get-value a2))
                            me
                )
              )
        )
    )

    (define (process-forget-value)
        (forget-value! a1 me)
        (forget-value! a2 me)
        (forget-value! sum me)
        (process-new-value)
    )

    (define (me request)
        (cond ((eq? request 'I-have-a-value) process-new-value)
              ((eq? request 'I-lost-my-value) process-forget-value)
              (else (error "Request not supported" request))
        )
    )

    (connect a1 me)
    (connect a2 me)
    (connect sum me)
    me
)

(define (multiplier a1 a2 product)
    (define (process-new-value)
        (cond ((and (has-value product) (= 0 (get-value product)) (has-value? a1))
               (set-value! a2 0 me)
              )
              ((and (has-value product) (= 0 (get-value product)) (has-value? a2))
               (set-value! a1 0 me)
              )
              ((and (has-value a1) (has-value a2))
               (set-value! product (* (get-value a1) (get-value a2)) me)
              )
              ((and (has-value product) (has-value a1))
               (set-value! a2 (/ (get-value product) (get-value a1)) me)
              )
              ((and (has-value product) (has-value a2))
               (set-value! a1 (/ (get-value product) (get-value a2)) me)
              )
        )
    )
    (define (process-forget-value)
        (forget-value! a1 me)
        (forget-value! a2 me)
        (forget-value! product me)
        (process-new-value)
    )
    (define (me request)
        (cond ((eq? request 'I-have-a-value) process-new-value)
              ((eq? request 'I-lost-my-value) process-forget-value)
              (else (error "Request not supported" request))
        )
    )
    (connect m1 me)
    (connect m2 me)
    (connect product me)
    me
)

(define (constant value connector)
    (define (me request)
        (error "Request not supported for constant")
    )
    (connect connector me)
    (set-value! connector value me)
    me
)

(define (make-connector)
    (let ((value false) (informant false) (constraints '()))
         (define (set-my-value! newval infor)
            (cond ((not (has-value? me))
                   (set! value newval)
                   (set! informant infor)
                   (for-each-except infor 
                                    inform-about-value
                                    constraints
                   )
                  )
                  ((not (= newval value))
                   (error "Contradiction" (list value newval))
                  )
                  (else 'ignored)
            )
         )
         
         (define (forget-my-value! retractor)
            (if (eq? retractor informant)
                (begin (set! informant false)
                       (for-each-except retractor
                                        inform-about-no-value
                                        constraints
                        )
                )
                'ignored
            )
         )


         (define (connect new-constraint)
            (if (not (memq new-constraint constraints))
                (set! constraints (cons new-constraint constraints))
            )
            (if (has-value? me)
                (inform-about-value new-constraint)
            )
            'done
         )

        (define (me request)
            (cond ((eq? request 'has-value?) (if (informant value) #t #f))
                  ((eq? request 'value) value)
                  ((eq? request 'set-value!) set-my-value!)
                  ((eq? request 'forget) forget-my-value!)
                  ((eq? request 'connect) connect)
                  (else (error "Request not supported" request))
            )
        )
    )
)


(define (for-each-except exception proc list)
    (cond ((null? list) 'done)
          ((eq? (car list) exception) 
           (for-each-except exception proc (cdr list)))
          (else (begin (proc (car list))) 
                (for-each-except exception proc (cdr list)))
    )
)

(define (has-value? connector)
    (connector 'has-value?)
)

(define (get-value connector)
    (connector 'get-value)
)

(define (set-value! connector new-value informant)
    ((connector 'set-value) new-value informant)
)

(define (forget-value! connector retractor)
    ((connector 'forget) retractor)
)

(define (connect connector constraint)
    ((connector 'connect) constraint)
)